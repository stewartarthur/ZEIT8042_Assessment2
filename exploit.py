# Python program to exploit vuln.c for Assessment 2

# Will most likely use a ROP/ret2libc method. (as NX protected)

# Need to decide what vulnerability to exploit.  
# Some options:
# - Call a hidden function (maybe too trivial though)
# - Call /bash/sh - reverse TCP but locally to prove functionality
#      but not worry about needing to submit code that needs 
#      modifying to run.
# - ret2libc and ROP with ASLR and NX enabled?


# To Do before submitting:
# - Insert original Assembly in Python script as comments.
# - Explain method being used and instructions for use.
# - Ensure all code is commented with an explanation of its purpose.
# - GOT and PLT usage explained
# - Explain how vuln.c was compiled, security features etc.
# - If going to use PWNTOOLS, include info on install.

# Questions to answer
# - Will memory addresses of system ROP Gadgets be the same 
#      between systems - since we know the base system?
# - Can I use pwntools for this? Brief doesn't say I can't, and can
#      change this script to execute independently. (instead of called via .txt)

import struct
from pwn import *

# This Python scripts creates (if needed) and updates exploit.txt.
# Execute exploit with: ./vuln < exploit.txt


with open('exploit.txt', 'w+') as f:

    # Overflow the buffer and control EIP
    # EIP point to system() - need to find
    # ret for system() [exit()] - need to find
    # arg for system() ["/bin/sh"] - need to find

    buf = ""
    buf += "A"*12
    buf += #system()
    buf += #exit()
    buf += #"/bin/sh"

    
    # This gets printed to exploit.txt
    f.write(buf)  
    print('(1) Exploit file is generated')
