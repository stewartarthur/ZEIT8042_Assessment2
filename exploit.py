# Python program to exploit vuln.c for Assessment 2

# Create a Python 'harness' that will execute the vulnerable program
# and exploit the vulnerability.

# The core of this exploit should be shellcode written in
# assembly and 'objdump' used to put the shellcode in Python.
# THIS won't work as NX enabled is the plan.  Remove this section.

# Will most likely use a ROP method. (as NX protected)

# Need to decide what vulnerability to exploit.  
# Some options:
# - Call a hidden function (maybe too trivial though)
# - Call /bash/sh - reverse TCP but locally to prove functionality
#      but not worry about needing to submit code that needs 
#      modifying to run.
# - ret2libc and ROP with ASLR and NX enabled?


# To Do before submitting:
# - Insert original Assembly in Python script as comments.
# - Explain method being used and instructions for use.
# - Ensure all code is commented with an explanation of its purpose.

# Questions to answer
# - Will memory addresses of system ROP Gadgets be the same 
#      between systems - since we know the base system?



import struct
import subprocess


# Section of code to be run when buffer is overflowed on the vulnerable program.

# To use, output this to a text file: python3 exploit.py > exploit.txt
# Execute exploit with: ./vuln < exploit.txt

buf = ""
buf += "A"*5
buf += "BBBB"





# This gets printed to exploit.txt
print buf


# Unable to get this execute ./vuln and send exploit.  
# Will come back to this for future refinement.
# exploit_code = b'A'*100
#
# def execute_vuln(payload):
#    process = subprocess.Popen(['./vuln'], stdin=subprocess.PIPE)
#    process.stdin.write(payload)
#    process.stdin.write(b'\n')
#    #process.stdin.write(str(payload) + '\n')
#    process.stdin.flush()
#    process.wait()
#
# execute_vuln(exploit_code)

